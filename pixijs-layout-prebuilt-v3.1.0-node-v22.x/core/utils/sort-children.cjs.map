{"version":3,"file":"sort-children.cjs","sources":["../../../src/core/utils/sort-children.ts"],"sourcesContent":["import { type Container } from 'pixi.js';\nimport { type OverflowContainer } from '../../components/LayoutContainer';\nimport { type Layout } from '../Layout';\n\n/**\n * Sorts the children of the layout based on their order in the parent container\n * This is necessary because not all children are part of the layout and we need to\n * make sure that the Yoga children are in the correct order\n * @param layout - The layout to sort the children for\n */\nexport function onChildAdded(layout: Layout, pixiParent: Container) {\n    let parentLayout = pixiParent.layout;\n    let yogaIndex = -1;\n\n    if (!parentLayout && (pixiParent as OverflowContainer).isOverflowContainer) {\n        parentLayout = pixiParent.parent?.layout;\n        // update yogaIndex\n        yogaIndex = pixiParent.children.indexOf(layout.target);\n        pixiParent = pixiParent.parent!;\n    }\n\n    if (parentLayout) {\n        const yogaParent = layout.yoga.getParent();\n\n        if (yogaParent) {\n            yogaParent!.removeChild(layout.yoga);\n        }\n\n        // If the child is the last one, we can just append it\n        if (pixiParent.children.indexOf(layout.target) === pixiParent.children.length - 1 && yogaIndex === -1) {\n            parentLayout.yoga.insertChild(layout.yoga, parentLayout.yoga.getChildCount());\n\n            return;\n        }\n\n        // Find the corresponding Yoga index\n        for (let i = 0; i < pixiParent.children.length; i++) {\n            const child = pixiParent.children[i]!;\n\n            if (child.layout && child.visible) {\n                yogaIndex++;\n            }\n            if (child === layout.target) {\n                break;\n            }\n        }\n\n        // If the yogaIndex is -1, it means the child was not found in the parent container\n        // This can happen if the child is not part of the layout or is not visible\n        // In this case, we do not insert the child into the Yoga layout\n        if (yogaIndex === -1) {\n            return;\n        }\n\n        parentLayout.yoga.insertChild(layout.yoga, yogaIndex);\n    }\n}\n\n/**\n * Removes the child from the layout\n * @param layout - The layout to remove the child from\n */\nexport function onChildRemoved(layout: Layout) {\n    const yogaParent = layout.yoga.getParent();\n\n    yogaParent && yogaParent!.removeChild(layout.yoga);\n}\n"],"names":[],"mappings":";;AAUgB,SAAA,aAAa,QAAgB,YAAuB;;AAChE,MAAI,eAAe,WAAW;AAC9B,MAAI,YAAY;AAEZ,MAAA,CAAC,gBAAiB,WAAiC,qBAAqB;AACxE,oBAAe,gBAAW,WAAX,mBAAmB;AAElC,gBAAY,WAAW,SAAS,QAAQ,OAAO,MAAM;AACrD,iBAAa,WAAW;AAAA,EAAA;AAG5B,MAAI,cAAc;AACR,UAAA,aAAa,OAAO,KAAK,UAAU;AAEzC,QAAI,YAAY;AACA,iBAAA,YAAY,OAAO,IAAI;AAAA,IAAA;AAInC,QAAA,WAAW,SAAS,QAAQ,OAAO,MAAM,MAAM,WAAW,SAAS,SAAS,KAAK,cAAc,IAAI;AACnG,mBAAa,KAAK,YAAY,OAAO,MAAM,aAAa,KAAK,eAAe;AAE5E;AAAA,IAAA;AAIJ,aAAS,IAAI,GAAG,IAAI,WAAW,SAAS,QAAQ,KAAK;AAC3C,YAAA,QAAQ,WAAW,SAAS,CAAC;AAE/B,UAAA,MAAM,UAAU,MAAM,SAAS;AAC/B;AAAA,MAAA;AAEA,UAAA,UAAU,OAAO,QAAQ;AACzB;AAAA,MAAA;AAAA,IACJ;AAMJ,QAAI,cAAc,IAAI;AAClB;AAAA,IAAA;AAGJ,iBAAa,KAAK,YAAY,OAAO,MAAM,SAAS;AAAA,EAAA;AAE5D;AAMO,SAAS,eAAe,QAAgB;AACrC,QAAA,aAAa,OAAO,KAAK,UAAU;AAE3B,gBAAA,WAAY,YAAY,OAAO,IAAI;AACrD;;;"}